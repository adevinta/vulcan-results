// Code generated by goagen v1.4.3, DO NOT EDIT.
//
// API "vulcan-results": CLI Commands
//
// Command:
// $ goagen
// --design=github.com/adevinta/vulcan-results/design
// --out=/Users/manel.montilla/develop/vulcan-results
// --version=v1.4.3

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/adevinta/vulcan-results/client"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/spf13/cobra"
	"log"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
)

type (
	// GetLogResultsCommand is the command line data structure for the getLog action of Results
	GetLogResultsCommand struct {
		// Check ID
		Check string
		// Report date
		Date string
		// Scan ID
		Scan        string
		PrettyPrint bool
	}

	// GetReportResultsCommand is the command line data structure for the getReport action of Results
	GetReportResultsCommand struct {
		// Check ID
		Check string
		// Report date
		Date string
		// Scan ID
		Scan        string
		PrettyPrint bool
	}

	// RawResultsCommand is the command line data structure for the raw action of Results
	RawResultsCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// ReportResultsCommand is the command line data structure for the report action of Results
	ReportResultsCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// ShowHealthcheckCommand is the command line data structure for the show action of healthcheck
	ShowHealthcheckCommand struct {
		PrettyPrint bool
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "get-log",
		Short: `Download a log`,
	}
	tmp1 := new(GetLogResultsCommand)
	sub = &cobra.Command{
		Use:   `results ["/v1/logs/DATE/SCAN/CHECK"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-report",
		Short: `Download a report`,
	}
	tmp2 := new(GetReportResultsCommand)
	sub = &cobra.Command{
		Use:   `results ["/v1/reports/DATE/SCAN/CHECK"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "raw",
		Short: `Update the Raw of a Check`,
	}
	tmp3 := new(RawResultsCommand)
	sub = &cobra.Command{
		Use:   `results ["/v1/raw"]`,
		Short: ``,
		Long: `

Payload example:

{
   "check_id": "64fbe3e2-93ab-4cfd-9939-7e7439af3bb4",
   "raw": "{ raw : \"BASE_64_FORMAT\" }",
   "scan_id": "9761ce78-ec8a-41b3-855f-d13e2e862adc",
   "scan_start_time": "2006-04-22T05:57:42Z"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "report",
		Short: `Update the Report of a Check`,
	}
	tmp4 := new(ReportResultsCommand)
	sub = &cobra.Command{
		Use:   `results ["/v1/report"]`,
		Short: ``,
		Long: `

Payload example:

{
   "check_id": "7a4c4427-5dac-4225-a600-016ce3ff4bbf",
   "report": "{ report : \"{\"report\":\"{\\\"check_id\\\":\\\"aabbccdd-abcd-0123-4567-abcdef012345\\\", .....}}\" }",
   "scan_id": "a4e012e5-d24d-4dc6-a49b-e97d862c76bf",
   "scan_start_time": "1995-08-24T02:02:26Z"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "show",
		Short: `Get the health status for the application`,
	}
	tmp5 := new(ShowHealthcheckCommand)
	sub = &cobra.Command{
		Use:   `healthcheck ["/healthcheck"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp5.Run(c, args) },
	}
	tmp5.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp5.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run makes the HTTP request corresponding to the GetLogResultsCommand command.
func (cmd *GetLogResultsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/v1/logs/%v/%v/%v", url.QueryEscape(cmd.Date), url.QueryEscape(cmd.Scan), url.QueryEscape(cmd.Check))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetLogResults(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetLogResultsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var check string
	cc.Flags().StringVar(&cmd.Check, "check", check, `Check ID`)
	var date string
	cc.Flags().StringVar(&cmd.Date, "date", date, `Report date`)
	var scan string
	cc.Flags().StringVar(&cmd.Scan, "scan", scan, `Scan ID`)
}

// Run makes the HTTP request corresponding to the GetReportResultsCommand command.
func (cmd *GetReportResultsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/v1/reports/%v/%v/%v", url.QueryEscape(cmd.Date), url.QueryEscape(cmd.Scan), url.QueryEscape(cmd.Check))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetReportResults(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetReportResultsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var check string
	cc.Flags().StringVar(&cmd.Check, "check", check, `Check ID`)
	var date string
	cc.Flags().StringVar(&cmd.Date, "date", date, `Report date`)
	var scan string
	cc.Flags().StringVar(&cmd.Scan, "scan", scan, `Scan ID`)
}

// Run makes the HTTP request corresponding to the RawResultsCommand command.
func (cmd *RawResultsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/v1/raw"
	}
	var payload client.RawPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RawResults(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RawResultsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the ReportResultsCommand command.
func (cmd *ReportResultsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/v1/report"
	}
	var payload client.ReportPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ReportResults(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ReportResultsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the ShowHealthcheckCommand command.
func (cmd *ShowHealthcheckCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/healthcheck"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowHealthcheck(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowHealthcheckCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}
