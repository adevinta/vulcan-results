// Code generated by goagen v1.4.3, DO NOT EDIT.
//
// API "vulcan-results": Application User Types
//
// Command:
// $ goagen
// --design=github.com/adevinta/vulcan-results/design
// --out=/Users/manel.montilla/develop/vulcan-results
// --version=v1.4.3

package app

import (
	"time"
	"unicode/utf8"

	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
)

// rawPayload user type.
type rawPayload struct {
	// Check UUID
	CheckID *uuid.UUID `form:"check_id,omitempty" json:"check_id,omitempty" yaml:"check_id,omitempty" xml:"check_id,omitempty"`
	// Raw result of a Check. It's a JSON with a BASE64 encoded value of the raw result
	Raw *string `form:"raw,omitempty" json:"raw,omitempty" yaml:"raw,omitempty" xml:"raw,omitempty"`
	// Scan UUID
	ScanID *uuid.UUID `form:"scan_id,omitempty" json:"scan_id,omitempty" yaml:"scan_id,omitempty" xml:"scan_id,omitempty"`
	// Scan start time
	ScanStartTime *time.Time `form:"scan_start_time,omitempty" json:"scan_start_time,omitempty" yaml:"scan_start_time,omitempty" xml:"scan_start_time,omitempty"`
}

// Publicize creates RawPayload from rawPayload
func (ut *rawPayload) Publicize() *RawPayload {
	var pub RawPayload
	if ut.CheckID != nil {
		pub.CheckID = ut.CheckID
	}
	if ut.Raw != nil {
		pub.Raw = ut.Raw
	}
	if ut.ScanID != nil {
		pub.ScanID = ut.ScanID
	}
	if ut.ScanStartTime != nil {
		pub.ScanStartTime = ut.ScanStartTime
	}
	return &pub
}

// RawPayload user type.
type RawPayload struct {
	// Check UUID
	CheckID *uuid.UUID `form:"check_id,omitempty" json:"check_id,omitempty" yaml:"check_id,omitempty" xml:"check_id,omitempty"`
	// Raw result of a Check. It's a JSON with a BASE64 encoded value of the raw result
	Raw *string `form:"raw,omitempty" json:"raw,omitempty" yaml:"raw,omitempty" xml:"raw,omitempty"`
	// Scan UUID
	ScanID *uuid.UUID `form:"scan_id,omitempty" json:"scan_id,omitempty" yaml:"scan_id,omitempty" xml:"scan_id,omitempty"`
	// Scan start time
	ScanStartTime *time.Time `form:"scan_start_time,omitempty" json:"scan_start_time,omitempty" yaml:"scan_start_time,omitempty" xml:"scan_start_time,omitempty"`
}

// reportPayload user type.
type reportPayload struct {
	// Check UUID
	CheckID *uuid.UUID `form:"check_id,omitempty" json:"check_id,omitempty" yaml:"check_id,omitempty" xml:"check_id,omitempty"`
	// Report of a Check. It's a JSON containing the value of the report
	Report *string `form:"report,omitempty" json:"report,omitempty" yaml:"report,omitempty" xml:"report,omitempty"`
	// Scan UUID
	ScanID *uuid.UUID `form:"scan_id,omitempty" json:"scan_id,omitempty" yaml:"scan_id,omitempty" xml:"scan_id,omitempty"`
	// Scan start time
	ScanStartTime *time.Time `form:"scan_start_time,omitempty" json:"scan_start_time,omitempty" yaml:"scan_start_time,omitempty" xml:"scan_start_time,omitempty"`
}

// Validate validates the reportPayload type instance.
func (ut *reportPayload) Validate() (err error) {
	if ut.Report != nil {
		if ok := goa.ValidatePattern(`^[[:print:]]+`, *ut.Report); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.report`, *ut.Report, `^[[:print:]]+`))
		}
	}
	if ut.Report != nil {
		if utf8.RuneCountInString(*ut.Report) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.report`, *ut.Report, utf8.RuneCountInString(*ut.Report), 2, true))
		}
	}
	return
}

// Publicize creates ReportPayload from reportPayload
func (ut *reportPayload) Publicize() *ReportPayload {
	var pub ReportPayload
	if ut.CheckID != nil {
		pub.CheckID = ut.CheckID
	}
	if ut.Report != nil {
		pub.Report = ut.Report
	}
	if ut.ScanID != nil {
		pub.ScanID = ut.ScanID
	}
	if ut.ScanStartTime != nil {
		pub.ScanStartTime = ut.ScanStartTime
	}
	return &pub
}

// ReportPayload user type.
type ReportPayload struct {
	// Check UUID
	CheckID *uuid.UUID `form:"check_id,omitempty" json:"check_id,omitempty" yaml:"check_id,omitempty" xml:"check_id,omitempty"`
	// Report of a Check. It's a JSON containing the value of the report
	Report *string `form:"report,omitempty" json:"report,omitempty" yaml:"report,omitempty" xml:"report,omitempty"`
	// Scan UUID
	ScanID *uuid.UUID `form:"scan_id,omitempty" json:"scan_id,omitempty" yaml:"scan_id,omitempty" xml:"scan_id,omitempty"`
	// Scan start time
	ScanStartTime *time.Time `form:"scan_start_time,omitempty" json:"scan_start_time,omitempty" yaml:"scan_start_time,omitempty" xml:"scan_start_time,omitempty"`
}

// Validate validates the ReportPayload type instance.
func (ut *ReportPayload) Validate() (err error) {
	if ut.Report != nil {
		if ok := goa.ValidatePattern(`^[[:print:]]+`, *ut.Report); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`type.report`, *ut.Report, `^[[:print:]]+`))
		}
	}
	if ut.Report != nil {
		if utf8.RuneCountInString(*ut.Report) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.report`, *ut.Report, utf8.RuneCountInString(*ut.Report), 2, true))
		}
	}
	return
}
