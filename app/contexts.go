// Code generated by goagen v1.4.3, DO NOT EDIT.
//
// API "vulcan-results": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/adevinta/vulcan-results/design
// --out=/Users/manel.montilla/develop/vulcan-results
// --version=v1.4.3

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// GetLogResultsContext provides the Results getLog action context.
type GetLogResultsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Check string
	Date  string
	Scan  string
}

// NewGetLogResultsContext parses the incoming request URL and body, performs validations and creates the
// context used by the Results controller getLog action.
func NewGetLogResultsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetLogResultsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetLogResultsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCheck := req.Params["check"]
	if len(paramCheck) > 0 {
		rawCheck := paramCheck[0]
		rctx.Check = rawCheck
	}
	paramDate := req.Params["date"]
	if len(paramDate) > 0 {
		rawDate := paramDate[0]
		rctx.Date = rawDate
	}
	paramScan := req.Params["scan"]
	if len(paramScan) > 0 {
		rawScan := paramScan[0]
		rctx.Scan = rawScan
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetLogResultsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetLogResultsContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetReportResultsContext provides the Results getReport action context.
type GetReportResultsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Check string
	Date  string
	Scan  string
}

// NewGetReportResultsContext parses the incoming request URL and body, performs validations and creates the
// context used by the Results controller getReport action.
func NewGetReportResultsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetReportResultsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetReportResultsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCheck := req.Params["check"]
	if len(paramCheck) > 0 {
		rawCheck := paramCheck[0]
		rctx.Check = rawCheck
	}
	paramDate := req.Params["date"]
	if len(paramDate) > 0 {
		rawDate := paramDate[0]
		rctx.Date = rawDate
	}
	paramScan := req.Params["scan"]
	if len(paramScan) > 0 {
		rawScan := paramScan[0]
		rctx.Scan = rawScan
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetReportResultsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetReportResultsContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// RawResultsContext provides the Results raw action context.
type RawResultsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *RawPayload
}

// NewRawResultsContext parses the incoming request URL and body, performs validations and creates the
// context used by the Results controller raw action.
func NewRawResultsContext(ctx context.Context, r *http.Request, service *goa.Service) (*RawResultsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RawResultsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *RawResultsContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RawResultsContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ReportResultsContext provides the Results report action context.
type ReportResultsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *ReportPayload
}

// NewReportResultsContext parses the incoming request URL and body, performs validations and creates the
// context used by the Results controller report action.
func NewReportResultsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ReportResultsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ReportResultsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *ReportResultsContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ReportResultsContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ShowHealthcheckContext provides the healthcheck show action context.
type ShowHealthcheckContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewShowHealthcheckContext parses the incoming request URL and body, performs validations and creates the
// context used by the healthcheck controller show action.
func NewShowHealthcheckContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowHealthcheckContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowHealthcheckContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowHealthcheckContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}
